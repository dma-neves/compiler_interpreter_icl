PARSER_BEGIN(ICLParser)

import ast.*;
import ast.types.*;
import java.util.*;

/** ID lister. */
public class ICLParser {
}

PARSER_END(ICLParser)

SKIP :
{
	" "
	| "\t"
	| "\r"
	| "\n"
}

TOKEN :
{
	< EQ : "=" >
	|
	< DEF : "def" >
	|
	< IN : "in" >
	|
	< END : "end" >
	|
	< TRUE : "true" >
	|
	< FALSE : "false" >
	|
	< NEW : "new" >
	|
	<PRINTLN : "println" >
	|
	< PRINT : "print" >
	|
	< IF : "if" >
	|
	< THEN : "then" >
	|
	< ELSE : "else" >
	|
	< WHILE : "while" >
	|
	< DO : "do" >
	|
	< FUN : "fun" >
	|
	< INT : "int" >
	|
	< BOOL : "bool" >
	|
	< REF : "ref" >
	|
	< Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
	|
	< Num: (["0"-"9"]) + >
	|
	< ARROW : "->" >
	|
	< PLUS : "+" >
	|
	< MINUS : "-">
	|
	< MUL : "*">
	|
	< DIV : "/">
	|
	< LPAR : "(" >
	|
	< RPAR : ")" >
	|
	< OR : "||" >
	|
	< AND : "&&" >
	|
	< NOT : "~" >
	|
	< GT : ">" >
	|
	< ST : "<" >
	|
	< GTE : ">=" >
	|
	< STE : "<=" >
	|
	< IEQ : "==" >
	|
	< DIF : "~=" >
	|
	< QM : "?" >
	|
	< COL : ":" >
	|
	< ASSIGN : ":=" >
	|
	<DEREF : "!" >
	|
	< ENDP : ";;" >
	|
	< SEQ : ";" >
	|
	< COMMA : "," >
}

ASTNode Start() :
{
	ASTNode t1;
}
{
	( t1 = Expression() <ENDP> { return t1; } | <EOF> { return null; } )
}

ASTNode Expression():
{
	ASTNode t1, t2;
}
{
	t1=Assignment() (<SEQ> t2=Assignment() { t1 = new ASTSequence(t1,t2); } )*
	{ return t1; }
}

ASTNode Assignment():
{
	ASTNode t1, t2;
}
{
	t1=BoolAdd() (<ASSIGN> t2=BoolAdd() { t1 = new ASTAssign(t1,t2); } )*
	{ return t1; }
}

ASTNode BoolAdd() :
{
	ASTNode t1, t2;
}
{
	t1=BoolMult() (<OR> t2=BoolMult() { t1 = new ASTBoolAdd(t1, t2); } )*
	{ return t1; }
}

ASTNode BoolMult() :
{
	ASTNode t1, t2;
}
{
	t1=Relop() (<AND> t2=Relop() { t1 = new ASTBoolMult(t1, t2); } )*

	{ return t1; }
}


ASTNode Relop() : 
{
	ASTNode t1, t2;
	Token tok;
}
{
	t1=IntAdd() ( (tok=<GT> | tok=<ST> | tok=<GTE> | tok=<STE> | tok=<IEQ> | tok=<DIF>) t2=IntAdd() { t1 = new ASTRelop(t1, tok.image, t2); } )?

	{ return t1; }
}

ASTNode IntAdd() :
{
	ASTNode t1,t2;
	Token tok;
}
{
	t1=Term() ( (tok=<PLUS> | tok=<MINUS>) t2=Term() { t1 = tok.kind==PLUS ? new ASTAdd(t1,t2) : new ASTSub(t1,t2); } )*
	{ return t1; }

}

ASTNode Term() :
{
	ASTNode t1,t2;
	List<ASTNode> args;
	Token tok;
}
{
	t1=Unary() 
	( 
		
		(tok=<MUL> | tok=<DIV>) t2=Unary() { t1 = (tok.kind == MUL) ? new ASTMul(t1,t2) : new ASTDiv(t1,t2); } |
		<LPAR> args=Arguments() <RPAR> { t1 = new ASTApply(t1, args); }
	)*

	{ return t1; }  
		
}

List<ASTNode> Arguments() :
{
	List<ASTNode> args = new LinkedList<ASTNode>();
	ASTNode t1;
}
{

	t1=Expression() { args.add(t1); } ( <COMMA> t1=Expression() { args.add(t1); } )*
	{ return args; }
}

ASTNode Unary() :
{
	ASTNode t1;
	Token tok;
}
{
	( 
		<TRUE> { t1 = new ASTBool(true); } |
		<FALSE> { t1 = new ASTBool(false); } |
		tok=<Num> { t1 = new ASTNum(Integer.parseInt(tok.image)); } | 
		<LPAR> t1=Expression() <RPAR> |
		<MINUS> t1=Unary() { t1 = new ASTUminus(t1); } |
		<NOT> t1=Unary() { t1 = new ASTNot(t1); } |
		tok = <Id> { t1 = new ASTId(tok.image); } |
		<NEW> t1=Unary() { t1 = new ASTNew(t1); } |
		<DEREF> t1=Unary() { t1 = new ASTDeref(t1); } |
		<PRINTLN> t1=Unary() { t1 = new ASTPrintln(t1); } |
		<PRINT> t1=Unary() { t1 = new ASTPrint(t1); } |

		t1 = Def() |
		t1 = Conditional() |
		t1 = Iteration() |
		t1 = Function()
	)   
	
	{ return t1; }   
}

ASTNode Def() :
{
	ASTNode t1, tf;
	IType t = null;
	Token tok;
	Map<TypedId, ASTNode> m = new HashMap<TypedId,ASTNode>();
}
{
	(
		<DEF> (tok=<Id> ( <COL> t=Type() )? <EQ> t1=Expression() { m.put( new TypedId(tok.image, t), t1); } )+ <IN> tf=Expression() <END>
	)
	{ return new ASTDef(m, tf); }
}

ASTNode Conditional() :
{
	ASTNode cond, t1, t2;
}
{
	<IF> cond=Expression() <THEN> t1=Expression() <ELSE> t2=Expression() <END> { t1 = new ASTIf(cond, t1, t2); }
	{ return t1; }
}

ASTNode Iteration() :
{
	ASTNode cond, t1;
}
{
	<WHILE> cond=Expression() <DO> t1=Expression() <END> { t1 = new ASTWhile(cond, t1); }
	{ return t1; }
}

ASTNode Function() :
{
	ASTNode t1;
	Token tok;
	List<TypedId> params;
}
{
	<FUN> params=Parameters() <ARROW>  t1=Expression() <END> { t1 = new ASTFun(params, t1); }
	{ return t1; }
}

List<TypedId> Parameters() :
{
	IType t;
	Token tok;
	List<TypedId> params = new LinkedList<TypedId>();
}
{
	( 
		tok=<Id> <COL> t=Type() { params.add( new TypedId(tok.image, t) ); } 
		( <COMMA> tok=<Id> <COL> t=Type() { params.add( new TypedId(tok.image, t) ); } )* 
	)? 

	{ return params; }
}

IType Type() :
{
	IType t;
	List<IType> paramTypes = new LinkedList<IType>();
}
{
	(
		<INT> { t = new IntType(); } |
		<BOOL> { t = new BoolType(); } |
		<REF> t=Type() { t = new RefType(t); } |
		<LPAR> t=Type() { paramTypes.add(t); } ( <COMMA> t=Type() {paramTypes.add(t); } )* <RPAR> t=Type() { t = new FunType(paramTypes, t); }
	)

	{ return t; }
}